<?php

namespace App\Models;


use Illuminate\Database\Eloquent\Relations\Pivot;

/**
 * Class ApplicationUser
 * @package App\Models
 * @property Role[] roles
 * @property Role default_role
 */
class ApplicationUser extends Pivot
{

    public $incrementing = false;

    /**
     * Many to many relation with Role model.
     * A little hacky, cause Eloquent don't handles relations with composite keys very well,
     * so we completely remove the crappy where clause generated by eloquent, and recreate it,
     * keeping the relationship.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function roles()
    {
        $relation = $this->belongsToMany(Role::class)->withPivot('default');
        $relation->getQuery()->getQuery()->wheres = [];
        $relation->where([
            'application_user_role.application_id' => $this->application_id,
            'application_user_role.user_id' => $this->user_id,
        ]);
        return $relation;
    }

    /**
     * Acessor to get the default role for this User/Application
     *
     * @return mixed
     */
    public function getDefaultRoleAttribute()
    {
        return $this->roles()->where(['application_user_role.default' => true])->first();
    }

    /**
     * Gets a specific role for the user/application if it exists.
     *
     * @param string|null $role
     * @return Role|mixed
     */
    public function getRole(string $role = null)
    {
        if ($role) {
            return $this->roles()->where(['role' => $role])->first();
        } else {
            return $this->default_role;
        }
    }
}
